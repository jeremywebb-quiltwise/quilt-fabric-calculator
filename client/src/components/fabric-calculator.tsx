import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { calculateFabricRequirements } from "@/lib/fabric-calculations";
import { Calculator, Save, Printer, Lightbulb } from "lucide-react";
import jsPDF from 'jspdf';

export default function FabricCalculator() {
  const [formData, setFormData] = useState({
    quiltWidth: "",
    quiltHeight: "",
    blockSize: "12",
    seamAllowance: "0.25",
    fabricWidth: "44",
    pattern: "pieced",
    bindingWidth: "2.5",
    backingPieces: "2",
    battingType: "cotton",
    extraFabric: "10",
  });

  const [results, setResults] = useState<any>(null);
  const [isCalculating, setIsCalculating] = useState(false);

  // PDF Generation Function
  const generatePDF = (results: any) => {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(22);
    doc.setTextColor(139, 69, 19);
    doc.text('Quilt Fabric Requirements', 105, 25, { align: 'center' });
    
    doc.setFontSize(10);
    doc.setTextColor(80, 80, 80);
    doc.text('Generated by Quiltwise.com', 105, 35, { align: 'center' });
    doc.text(`${new Date().toLocaleDateString()}`, 105, 42, { align: 'center' });
    
    // Line under header
    doc.setLineWidth(1);
    doc.setDrawColor(139, 69, 19);
    doc.line(20, 50, 190, 50);
    
    // Quilt Info
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('QUILT SPECIFICATIONS', 20, 65);
    
    doc.setFontSize(10);
    doc.text(`Size: ${results.quiltSize}`, 25, 75);
    doc.text(`Perimeter: ${results.perimeter}`, 25, 82);
    
    // Shopping List Title
    doc.setFontSize(12);
    doc.text('SHOPPING LIST', 20, 100);
    
    // Table headers
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    doc.text('ITEM', 25, 112);
    doc.text('AMOUNT', 160, 112);
    
    // Header underline
    doc.setLineWidth(0.5);
    doc.setDrawColor(180, 180, 180);
    doc.line(25, 115, 175, 115);
    
    // Shopping items
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    let y = 125;
    
    const items = [
      ['[ ] Main fabric', `${results.mainFabric} yards`],
      ...(results.accentFabric1 !== "0" ? [['[ ] Accent fabric #1', `${results.accentFabric1} yards`]] : []),
      ...(results.accentFabric2 !== "0" ? [['[ ] Accent fabric #2', `${results.accentFabric2} yards`]] : []),
      ['[ ] Binding fabric', `${results.bindingFabric} yards`],
      ['[ ] Backing fabric', `${results.backingFabric} yards`],
      ['[ ] Batting', results.battingSize],
      ['[ ] Thread', 'As needed']
    ];
    
    items.forEach(([item, amount]) => {
      doc.text(item, 25, y);
      doc.text(amount, 175, y, { align: 'right' });
      y += 8;
    });
    
    // Total section
    y += 8;
    doc.setFillColor(240, 240, 240);
    doc.rect(20, y - 3, 170, 12, 'F');
    doc.setFontSize(11);
    doc.setTextColor(139, 69, 19);
    doc.text(`TOTAL FABRIC: ${results.totalFabric} yards`, 105, y + 4, { align: 'center' });
    
    // Notes
    y += 25;
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text('NOTES:', 20, y);
    y += 8;
    
    doc.setFontSize(9);
    const notes = [
      '• Measurements in fractional yards as sold in stores',
      '• Pre-wash all fabrics before cutting',
      '• Purchase from same dye lot for consistency',
      '• Consider 10% extra for mistakes and repairs'
    ];
    
    notes.forEach(note => {
      doc.text(note, 25, y);
      y += 6;
    });
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(120, 120, 120);
    doc.text('Quiltwise.com', 105, 280, { align: 'center' });
    
    // Save PDF
    doc.save(`quilt-shopping-list-${Date.now()}.pdf`);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleCalculate = async () => {
    setIsCalculating(true);
    try {
      const data = {
        quiltWidth: parseInt(formData.quiltWidth) || 0,
        quiltHeight: parseInt(formData.quiltHeight) || 0,
        blockSize: parseInt(formData.blockSize) || 12,
        seamAllowance: formData.seamAllowance,
        fabricWidth: parseInt(formData.fabricWidth) || 44,
        pattern: formData.pattern,
        bindingWidth: formData.bindingWidth,
        backingPieces: formData.backingPieces,
        battingType: formData.battingType,
        extraFabric: formData.extraFabric,
      };
      
      const calculationResults = calculateFabricRequirements(data);
      console.log("Calculation results:", calculationResults);
      setResults(calculationResults);

      // Save calculation to database for tracking
      try {
        await fetch('/api/calculations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            quiltWidth: data.quiltWidth,
            quiltHeight: data.quiltHeight,
            blockSize: data.blockSize,
            seamAllowance: data.seamAllowance,
            fabricWidth: data.fabricWidth,
            pattern: data.pattern,
            results: JSON.stringify(calculationResults),
            totalYards: calculationResults.totalFabric,
          }),
        });
      } catch (saveError) {
        console.error("Failed to save calculation:", saveError);
        // Don't block the user experience if saving fails
      }
    } catch (error) {
      console.error("Calculation error:", error);
    } finally {
      setIsCalculating(false);
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
      {/* Calculator Form */}
      <Card className="bg-white shadow-lg form-container">
        <CardContent className="p-8">
          <h3 className="text-xl font-semibold text-charcoal mb-6">Project Details</h3>
          
          <div className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="quiltWidth" className="text-sm font-medium text-charcoal mb-2">
                  Quilt Width (inches)
                </Label>
                <Input
                  id="quiltWidth"
                  type="number"
                  placeholder="enter number"
                  value={formData.quiltWidth}
                  onChange={(e) => handleInputChange("quiltWidth", e.target.value)}
                  className="focus:ring-terracotta focus:border-terracotta"
                />
              </div>
              <div>
                <Label htmlFor="quiltHeight" className="text-sm font-medium text-charcoal mb-2">
                  Quilt Height (inches)
                </Label>
                <Input
                  id="quiltHeight"
                  type="number"
                  placeholder="enter number"
                  value={formData.quiltHeight}
                  onChange={(e) => handleInputChange("quiltHeight", e.target.value)}
                  className="focus:ring-terracotta focus:border-terracotta"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="seamAllowance" className="text-sm font-medium text-charcoal mb-2">
                  Seam Allowance
                </Label>
                <Select value={formData.seamAllowance} onValueChange={(value) => handleInputChange("seamAllowance", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select seam allowance" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0.125">1/8 inch</SelectItem>
                    <SelectItem value="0.25">1/4 inch (Standard)</SelectItem>
                    <SelectItem value="0.375">3/8 inch</SelectItem>
                    <SelectItem value="0.5">1/2 inch</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="extraFabric" className="text-sm font-medium text-charcoal mb-2">
                  Extra Fabric (%)
                </Label>
                <Select value={formData.extraFabric} onValueChange={(value) => handleInputChange("extraFabric", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select extra fabric" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5% (Experienced)</SelectItem>
                    <SelectItem value="10">10% (Standard)</SelectItem>
                    <SelectItem value="15">15% (Beginner)</SelectItem>
                    <SelectItem value="20">20% (Complex Pattern)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="fabricWidth" className="text-sm font-medium text-charcoal mb-2">
                  Fabric Width (inches)
                </Label>
                <Select value={formData.fabricWidth} onValueChange={(value) => handleInputChange("fabricWidth", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select fabric width" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="42">42" (Cotton Quilting)</SelectItem>
                    <SelectItem value="44">44" (Standard Cotton)</SelectItem>
                    <SelectItem value="45">45" (Wide Cotton)</SelectItem>
                    <SelectItem value="60">60" (Wide Specialty)</SelectItem>
                    <SelectItem value="108">108" (Extra Wide Backing)</SelectItem>
                    <SelectItem value="120">120" (Seamless Backing)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="bindingWidth" className="text-sm font-medium text-charcoal mb-2">
                  Binding Strip Width
                </Label>
                <Select value={formData.bindingWidth} onValueChange={(value) => handleInputChange("bindingWidth", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select binding width" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="2">2" (Narrow)</SelectItem>
                    <SelectItem value="2.25">2¼" (Standard)</SelectItem>
                    <SelectItem value="2.5">2½" (Wide)</SelectItem>
                    <SelectItem value="3">3" (Extra Wide)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="pattern" className="text-sm font-medium text-charcoal mb-2">
                  Quilt Type
                </Label>
                <Select value={formData.pattern} onValueChange={(value) => handleInputChange("pattern", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select quilt type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pieced">Pieced Quilt</SelectItem>
                    <SelectItem value="applique">Appliqué Quilt</SelectItem>
                    <SelectItem value="wholecloth">Whole Cloth</SelectItem>
                    <SelectItem value="art">Art Quilt</SelectItem>
                    <SelectItem value="baby">Baby Quilt</SelectItem>
                    <SelectItem value="medallion">Medallion Style</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="battingType" className="text-sm font-medium text-charcoal mb-2">
                  Batting Type
                </Label>
                <Select value={formData.battingType} onValueChange={(value) => handleInputChange("battingType", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select batting" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cotton">100% Cotton</SelectItem>
                    <SelectItem value="cotton-poly">Cotton/Poly Blend</SelectItem>
                    <SelectItem value="polyester">100% Polyester</SelectItem>
                    <SelectItem value="wool">Wool</SelectItem>
                    <SelectItem value="bamboo">Bamboo</SelectItem>
                    <SelectItem value="silk">Silk</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div>
              <Label htmlFor="backingPieces" className="text-sm font-medium text-charcoal mb-2">
                Backing Configuration
              </Label>
              <Select value={formData.backingPieces} onValueChange={(value) => handleInputChange("backingPieces", value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select backing style" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Single Width (up to 40" wide)</SelectItem>
                  <SelectItem value="2">Two Panels (Standard)</SelectItem>
                  <SelectItem value="3">Three Panels (Wide Quilts)</SelectItem>
                  <SelectItem value="horizontal">Horizontal Seam</SelectItem>
                  <SelectItem value="wide">Wide Backing Fabric</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="mt-6 space-y-3">
              <Button 
                onClick={handleCalculate}
                disabled={isCalculating}
                className="w-full py-4 text-lg font-medium"
                style={{ 
                  backgroundColor: 'hsl(14, 31%, 40%)', 
                  color: 'white',
                  border: 'none'
                }}
                size="lg"
              >
                <Calculator className="mr-2 h-5 w-5 text-white" />
                {isCalculating ? "Calculating..." : "Calculate Fabric Requirements"}
              </Button>
              
              <div className="text-center text-sm text-gray-600">
                Enter quilt dimensions above and click to calculate fabric needs
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Results */}
      <Card className="bg-white shadow-lg">
        <CardContent className="p-8">
          <h3 className="text-xl font-semibold text-charcoal mb-6">Fabric Requirements</h3>
          
          {results ? (
            <div className="space-y-6 calculation-results">
              {/* Print Title - only visible when printing */}
              <div className="hidden print:block text-center mb-6">
                <h1 className="text-2xl font-bold text-charcoal">Quilt Fabric Requirements</h1>
                <p className="text-gray-600">Generated by Quiltwise.com</p>
              </div>
              
              {/* Quilt Information */}
              <div className="bg-sage/10 p-4 rounded-lg">
                <h4 className="font-semibold text-charcoal mb-2">Quilt Specifications</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>Finished Size: <span className="font-medium">{results.quiltSize}</span></div>
                  <div>Perimeter: <span className="font-medium">{results.perimeter}</span></div>
                </div>
              </div>

              {/* Fabric Requirements */}
              <div className="bg-cream p-6 rounded-xl">
                <h4 className="font-semibold text-charcoal mb-4">Fabric Requirements</h4>
                <div className="space-y-4">
                  <div className="flex justify-between items-center pb-3 border-b border-gray-200">
                    <span className="font-medium text-charcoal">Main Fabric</span>
                    <span className="text-terracotta font-semibold">{results.mainFabric} {results.mainFabric === "0" ? "" : "yard" + (results.mainFabric === "1" ? "" : "s")}</span>
                  </div>
                  {results.accentFabric1 !== "0" && (
                    <div className="flex justify-between items-center pb-3 border-b border-gray-200">
                      <span className="font-medium text-charcoal">Accent Fabric #1</span>
                      <span className="text-terracotta font-semibold">{results.accentFabric1} {results.accentFabric1 === "1" ? "yard" : "yards"}</span>
                    </div>
                  )}
                  {results.accentFabric2 !== "0" && (
                    <div className="flex justify-between items-center pb-3 border-b border-gray-200">
                      <span className="font-medium text-charcoal">Accent Fabric #2</span>
                      <span className="text-terracotta font-semibold">{results.accentFabric2} {results.accentFabric2 === "1" ? "yard" : "yards"}</span>
                    </div>
                  )}
                  <div className="flex justify-between items-center pb-3 border-b border-gray-200">
                    <span className="font-medium text-charcoal">Binding Fabric</span>
                    <span className="text-terracotta font-semibold">{results.bindingFabric} {results.bindingFabric === "1" ? "yard" : "yards"}</span>
                  </div>
                  <div className="flex justify-between items-center pb-3 border-b border-gray-200">
                    <span className="font-medium text-charcoal">Backing Fabric</span>
                    <span className="text-terracotta font-semibold">{results.backingFabric} {results.backingFabric === "1" ? "yard" : "yards"}</span>
                  </div>
                </div>
              </div>

              {/* Batting Requirements */}
              <div className="bg-wheat/10 p-4 rounded-lg">
                <h4 className="font-semibold text-charcoal mb-2">Batting Requirements</h4>
                <div className="space-y-2 text-sm">
                  <div>Size Needed: <span className="font-medium">{results.battingSize}</span></div>
                  <div>Type: <span className="font-medium">{results.battingType}</span></div>
                </div>
              </div>

              {/* Total Summary */}
              <div className="bg-terracotta/10 p-4 rounded-lg">
                <div className="flex justify-between items-center text-lg font-semibold">
                  <span className="text-charcoal">Total Fabric Needed</span>
                  <span className="text-terracotta">{results.totalFabric} {results.totalFabric === "1" ? "yard" : "yards"}</span>
                </div>
              </div>
              
              <div className="p-4 bg-sage/10 rounded-lg">
                <div className="flex items-start space-x-3">
                  <Lightbulb className="text-sage mt-1 h-5 w-5" />
                  <div>
                    <p className="text-sm font-medium text-charcoal">Pro Tip</p>
                    <p className="text-sm text-gray-600">
                      Add 10% extra fabric for mistakes and future repairs. Consider pre-washing all fabrics.
                    </p>
                  </div>
                </div>
              </div>

              {/* Shopping List */}
              <div className="bg-cream p-6 rounded-xl shopping-list">
                <h4 className="font-semibold text-charcoal mb-4">Shopping List</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>□ Main fabric ({results.mainFabric} yards)</span>
                    <span className="text-terracotta">_____</span>
                  </div>
                  {results.accentFabric1 !== "0" && (
                    <div className="flex justify-between">
                      <span>□ Accent fabric #1 ({results.accentFabric1} yards)</span>
                      <span className="text-terracotta">_____</span>
                    </div>
                  )}
                  {results.accentFabric2 !== "0" && (
                    <div className="flex justify-between">
                      <span>□ Accent fabric #2 ({results.accentFabric2} yards)</span>
                      <span className="text-terracotta">_____</span>
                    </div>
                  )}
                  <div className="flex justify-between">
                    <span>□ Binding fabric ({results.bindingFabric} yards)</span>
                    <span className="text-terracotta">_____</span>
                  </div>
                  <div className="flex justify-between">
                    <span>□ Backing fabric ({results.backingFabric} yards)</span>
                    <span className="text-terracotta">_____</span>
                  </div>
                  <div className="flex justify-between">
                    <span>□ Batting ({results.battingSize})</span>
                    <span className="text-terracotta">_____</span>
                  </div>
                  <div className="flex justify-between">
                    <span>□ Thread (coordinating colors)</span>
                    <span className="text-terracotta">_____</span>
                  </div>
                </div>
              </div>
              
              <div className="flex gap-4">
                <Button variant="outline" className="flex-1">
                  <Save className="mr-2 h-4 w-4" />
                  Save
                </Button>
                <Button 
                  variant="outline" 
                  className="flex-1"
                  onClick={() => generatePDF(results)}
                >
                  <Printer className="mr-2 h-4 w-4" />
                  Download PDF
                </Button>
              </div>
            </div>
          ) : (
            <div className="text-center py-12">
              <Calculator className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <p className="text-gray-600">Enter your quilt dimensions and click calculate to see fabric requirements.</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
